import { useCallback } from 'react';
import { SpecialFood, SnakeSegment, Food, SpecialFoodType } from '@/types/game';
import { GAME_CONFIG } from '@/lib/constants';

/**
 * ÁâπÊÆäÊñπÂùóÁ≥ªÁªüÁÆ°ÁêÜHook
 * 
 * Ê†∏ÂøÉÊú∫Âà∂Ôºö
 * - ËõáË∫´ÈïøÂ∫¶ËææÂà∞10ÔºöÁîüÊàê‰∏áËÉΩÊñπÂùóÔºà8ÁßíÂ≠òÂú®Êó∂Èó¥Ôºâ
 * - ËõáË∫´ÈïøÂ∫¶ËææÂà∞20ÔºöÁîüÊàêÁàÜÁÇ∏ÊñπÂùóÔºà5ÁßíÂ≠òÂú®Êó∂Èó¥Ôºâ
 * - Âü∫‰∫éÈïøÂ∫¶ÁöÑÈ£éÈô©Êî∂ÁõäÂçöÂºàÊú∫Âà∂
 */
export function useSpecialFoodSystem() {
  
  // Ê£ÄÊü•ÊòØÂê¶Â∫îËØ•ÁîüÊàêÁâπÊÆäÊñπÂùó
  const checkSpecialFoodGeneration = useCallback((
    snakeLength: number,
    universalTriggered: boolean,
    bombTriggered: boolean
  ): { shouldGenerateUniversal: boolean; shouldGenerateBomb: boolean } => {
    
    const shouldGenerateUniversal = snakeLength >= 10 && !universalTriggered;
    const shouldGenerateBomb = snakeLength >= 20 && !bombTriggered;
    
    console.log('üéØ ÁâπÊÆäÊñπÂùóÁîüÊàêÊ£ÄÊü•:', {
      snakeLength,
      universalTriggered,
      bombTriggered,
      shouldGenerateUniversal,
      shouldGenerateBomb
    });
    
    return {
      shouldGenerateUniversal,
      shouldGenerateBomb
    };
  }, []);
  
  // ÁîüÊàêÁâπÊÆäÊñπÂùó
  const generateSpecialFood = useCallback((
    type: SpecialFoodType,
    snake: SnakeSegment[],
    existingFoods: Food[],
    existingSpecialFoods: SpecialFood[]
  ): SpecialFood | null => {
    
    const occupiedPositions = new Set<string>();
    
    // ËÆ∞ÂΩïËõáË∫´Âç†Áî®ÁöÑ‰ΩçÁΩÆ
    snake.forEach(segment => {
      occupiedPositions.add(`${segment.x},${segment.y}`);
    });
    
    // ËÆ∞ÂΩïÁé∞ÊúâÈ£üÁâ©Âç†Áî®ÁöÑ‰ΩçÁΩÆ
    existingFoods.forEach(food => {
      occupiedPositions.add(`${food.x},${food.y}`);
    });
    
    // ËÆ∞ÂΩïÁé∞ÊúâÁâπÊÆäÊñπÂùóÂç†Áî®ÁöÑ‰ΩçÁΩÆ
    existingSpecialFoods.forEach(specialFood => {
      occupiedPositions.add(`${specialFood.x},${specialFood.y}`);
    });
    
    // ÂØªÊâæÁ©∫ÁôΩ‰ΩçÁΩÆ
    let attempts = 0;
    const maxAttempts = 100;
    
    while (attempts < maxAttempts) {
      const x = Math.floor(Math.random() * GAME_CONFIG.gridWidth);
      const y = Math.floor(Math.random() * GAME_CONFIG.gridHeight);
      const positionKey = `${x},${y}`;
      
      if (!occupiedPositions.has(positionKey)) {
        const currentTime = Date.now();
        const duration = type === 'UNIVERSAL' ? 8000 : 5000; // ‰∏áËÉΩÊñπÂùó8ÁßíÔºåÁàÜÁÇ∏ÊñπÂùó5Áßí
        
        const specialFood: SpecialFood = {
          x,
          y,
          type,
          expiresAt: currentTime + duration
        };
        
        console.log('‚ú® ÁîüÊàêÁâπÊÆäÊñπÂùó:', {
          type,
          position: { x, y },
          duration: duration / 1000 + 'Áßí',
          expiresAt: new Date(specialFood.expiresAt).toLocaleTimeString()
        });
        
        return specialFood;
      }
      
      attempts++;
    }
    
    console.warn('‚ö†Ô∏è Êó†Ê≥ïÊâæÂà∞Á©∫‰ΩçÁΩÆÁîüÊàêÁâπÊÆäÊñπÂùó');
    return null;
  }, []);
  
  // Ê£ÄÊü•ÁâπÊÆäÊñπÂùóÊòØÂê¶ËøáÊúü
  const removeExpiredSpecialFoods = useCallback((specialFoods: SpecialFood[]): SpecialFood[] => {
    const currentTime = Date.now();
    const validSpecialFoods = specialFoods.filter(specialFood => {
      const isValid = currentTime < specialFood.expiresAt;
      if (!isValid) {
        console.log('‚è∞ ÁâπÊÆäÊñπÂùóËøáÊúü:', {
          type: specialFood.type,
          position: { x: specialFood.x, y: specialFood.y }
        });
      }
      return isValid;
    });
    
    return validSpecialFoods;
  }, []);
  
  // Ê£ÄÊü•ËõáÂ§¥ÊòØÂê¶ÂêÉÂà∞ÁâπÊÆäÊñπÂùó
  const checkSpecialFoodCollision = useCallback((
    snakeHead: SnakeSegment,
    specialFoods: SpecialFood[]
  ): SpecialFood | null => {
    const eatenSpecialFood = specialFoods.find(specialFood => 
      specialFood.x === snakeHead.x && specialFood.y === snakeHead.y
    );
    
    if (eatenSpecialFood) {
      console.log('üéâ ÂêÉÂà∞ÁâπÊÆäÊñπÂùó:', {
        type: eatenSpecialFood.type,
        position: { x: eatenSpecialFood.x, y: eatenSpecialFood.y }
      });
    }
    
    return eatenSpecialFood || null;
  }, []);
  
  // ÁßªÈô§Ë¢´ÂêÉÊéâÁöÑÁâπÊÆäÊñπÂùó
  const removeEatenSpecialFood = useCallback((
    specialFoods: SpecialFood[],
    eatenSpecialFood: SpecialFood
  ): SpecialFood[] => {
    return specialFoods.filter(specialFood => 
      !(specialFood.x === eatenSpecialFood.x && 
        specialFood.y === eatenSpecialFood.y &&
        specialFood.type === eatenSpecialFood.type)
    );
  }, []);
  
  return {
    checkSpecialFoodGeneration,
    generateSpecialFood,
    removeExpiredSpecialFoods,
    checkSpecialFoodCollision,
    removeEatenSpecialFood,
  };
} 